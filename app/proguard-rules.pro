## AUTOGENERATED BY AI ASSISTANT - REVIEW AND CUSTOMIZE
#
## Keep Kotlin Coroutines internal classes
#-keepnames class kotlinx.coroutines.internal.** { *; }
#
## Keep Kotlin stdlib specific annotations and metadata
#-keep class kotlin.Metadata { *; }
#-keepclassmembers class kotlin.coroutines.jvm.internal.*Generated {
#    <fields>;
#    <methods>;
#}
#-keepnames class kotlin.* { @kotlin.jvm.JvmName <methods>; }
#-keepclassmembers enum * {
#    public static **[] values();
#    public static ** valueOf(java.lang.String);
#}
#-keepnames,allowshrinking,allowobfuscation class kotlin.** { *; }
#-keepclassmembers class ** {
#    @kotlin.jvm.JvmStatic <methods>;
#    @kotlin.jvm.JvmField <fields>;
#}
#
## Keep attributes for annotation processing.
#-keepattributes Signature
#-keepattributes InnerClasses
#-keepattributes EnclosingMethod
#-keepattributes RuntimeVisibleAnnotations,RuntimeInvisibleAnnotations,RuntimeVisibleParameterAnnotations,RuntimeInvisibleParameterAnnotations,AnnotationDefault
#
## For Firebase Firestore:
## If you use @PropertyName annotations with Firestore, keep them.
#-keepattributes RuntimeVisibleAnnotations,RuntimeInvisibleAnnotations
#
## Keep your data model classes that are used with Firestore.
## Adjust the package 'de.geosphere.speechplaning.data.model.**' if your models are elsewhere.
#-keep public class de.geosphere.speechplaning.data.model.** { <fields>; <init>(...); }
#-keep public class de.geosphere.speechplaning.data.Event { *; }
#-keep public class de.geosphere.speechplaning.data.SpiritualStatus { *; }
#-keep public class de.geosphere.speechplaning.data.model.Chairman { *; }
#
## Add rules for other libraries you use here.
## For example, for Retrofit, OkHttp, Gson, Moshi, Glide, Picasso, etc.
## Always consult the official documentation of each library for specific ProGuard rules.
## Example:
## -dontwarn okio.**
## -dontwarn retrofit2.**
## -keep class com.yourpackage.YourDataClass { *; }
## -keep interface com.yourpackage.YourApiService { *; }
#
#
## Keep custom views that are used in XML layouts.
#-keep public class * extends android.view.View {
#    public <init>(android.content.Context);
#    public <init>(android.content.Context, android.util.AttributeSet);
#    public <init>(android.content.Context, android.util.AttributeSet, int);
#    public void set*(...);
#}
#
## Keep Application, Activity, Service, BroadcastReceiver, ContentProvider classes
## that are referenced in AndroidManifest.xml. R8 is usually good at this.
#-keep public class * extends android.app.Application
#-keep public class * extends android.app.Activity
#-keep public class * extends android.app.Service
#-keep public class * extends android.content.BroadcastReceiver
#-keep public class * extends android.content.ContentProvider
#-keep public class * extends androidx.core.app.CoreComponentFactory
#
## Keep ViewModel classes and their factories
#-keep public class * extends androidx.lifecycle.ViewModel
#-keep public class * implements androidx.lifecycle.ViewModelProvider.Factory
#
## Keep Parcelable implementations
#-keep class * implements android.os.Parcelable {
#  public static final android.os.Parcelable$Creator *;
#}
#
## Keep enums that are serialized (e.g. by name, or used in reflection)
#-keepclassmembers enum * {
#    public static **[] values();
#    public static ** valueOf(java.lang.String);
#}
#
## Keep R class and its members for resources, if necessary (usually handled by AGP)
## -keep class **.R$* {
##    <fields>;
## }
#
## Keep class members that are accessed via JNI.
## -keepclassmembers class com.example.YourClassWithNativeMethods {
##    native <methods>;
## }
#
## Keep callback methods for UI events (e.g., android:onClick in XML)
#-keepclassmembers class * extends android.app.Activity {
#   public void *(android.view.View);
#}
#-keepclassmembers class * extends androidx.fragment.app.Fragment {
#   public void *(android.view.View);
#}
#
## Keep classes and members annotated with @Keep from androidx.annotation
#-keep @androidx.annotation.Keep class * {*;}
#-keepclasseswithmembers class * {
#    @androidx.annotation.Keep <fields>;
#}
#-keepclasseswithmembers class * {
#    @androidx.annotation.Keep <methods>;
#}
#
## For classes that are serialized (e.g. with Gson, Moshi, Serializable)
#-keepclassmembers class * implements java.io.Serializable {
#    static final long serialVersionUID;
#    private static final java.io.ObjectStreamField[] serialPersistentFields;
#    private void writeObject(java.io.ObjectOutputStream);
#    private void readObject(java.io.ObjectInputStream);
#    java.lang.Object writeReplace();
#    java.lang.Object readResolve();
#}
#
## If you use @android.webkit.JavascriptInterface
#-keepclassmembers class * {
#    @android.webkit.JavascriptInterface <methods>;
#}
#
## END OF AUTOGENERATED RULES - REVIEW AND CUSTOMIZE
